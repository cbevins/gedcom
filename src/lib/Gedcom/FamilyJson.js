/**
 * Parses a GedcomRecords instance to produce an array of Family records
 * in plain old JSON format (without any object references) that is:
 * - network-transportable and
 * - may be directly imported by other JS files
 */
import fs from 'fs'

export class FamilyJson {
    constructor(gedrecs) {
        this._gedrecs = gedrecs
    }

    // Returns array of *content* for each matching GedcomRecord
    _all(key, context) {
        const recs = this._gedrecs.findAll(key, context)
        const contents = []
        for (let i=0; i<recs.length; i++) {
            contents.push(recs[i].content())
        }
        return contents
    }
    // Returns *content* or *missing*
    _first(key, context, missing='') {
        const rec = this._gedrecs.findFirst(key, context)
        return rec ? rec.content() : missing
    }

    // These methods return the *content* of the matched GedcomRecord or records
    xKey(famKey) { return this._first(famKey, ['FAM', 'WIFE']) }
    yKey(famKey) { return this._first(famKey, ['FAM', 'HUSB']) }
    childKeys(famKey) { return this._all(famKey, ['FAM', 'CHIL'])}
    divDate(famKey) { return this._first(famKey, ['FAM', 'DIV', 'DATE']) }
    divNote(famKey) { return this._first(famKey, ['FAM', 'DIV', 'NOTE']) }
    divPlace(famKey) { return this._first(famKey, ['FAM', 'DIV', 'PLAC']) }
    divSources(famKey) { return this._all(famKey, ['FAM', 'DIV', 'SOUR']) }
    marrDate(famKey) { return this._first(famKey, ['FAM', 'MARR', 'DATE']) }
    marrNote(famKey) { return this._first(famKey, ['FAM', 'MARR', 'NOTE']) }
    marrPlace(famKey) { return this._first(famKey, ['FAM', 'MARR', 'PLAC']) }
    marrSources(famKey) { return this._all(famKey, ['FAM', 'MARR', 'SOUR']) }

    // Hydrates a family object into a Family instance by hydrating all keys into references
    hydrate(family) {

    }

    // Returns a JSON object containing all the FAM data for a famKey '@Fn@' that can be stringified
    toJson(famKey) {
        const family = {
            gedKey: famKey,
            parent: {
                x: this.xKey(famKey),   // mother's INDI gedKey like '@I123@'
                y: this.yKey(famKey),   // father's INDI gedKey like '@I123@'
            },
            child: this.childKeys(famKey),      // array of childrens INDI gedKeys like '@I123@'
            union: {
                date: this.marrDate(famKey),    // DATE subrecord content text
                place: this.marrPlace(famKey),  // PLAC subrecord content text
                note: this.marrNote(famKey),    // NOTE subrecord (plus CONC and CONT) content text
                sources: this.marrSources(famKey),  // array of SOUR subrecord keys
            },
            disunion: {
                date: this.divDate(famKey),    // DATE subrecord content text
                place: this.divPlace(famKey),  // PLAC subrecord content text
                note: this.divNote(famKey),    // NOTE subrecord (plus CONC and CONT) content text
                sources: this.divSources(famKey),  // array of SOUR subrecord keys
            }
        }
        return family
    }

    // Returns an array of all the FAM record objects, which may be stringified as its not hydrated.
    toJsonArray() {
        const families = []
        const famMap = this._gedrecs.topLevelRecordsFor('FAM')
        for(const famKey of famMap.keys()) families.push(this.toJson(famKey))
        return families
    }

    // Returns a stringified plain old JSON object embedded inside a Javascript declaration
    toJsonArrayFile(indent=0, varName='jsonFamilies') {
        const famArr = this.toJsonArray()
        let text = `// auto-generated by FamilyJson.toJsonFile() on ${new Date().toLocaleString()}\n`
        text += `export const ${varName} =\n`
        text += JSON.stringify(famArr, null, indent)
        return text
    }

    // Returns an array of all the FAM record [key, objects], which may be stringified as its not hydrated.
    toJsonMap() {
        const families = []
        const famMap = this._gedrecs.topLevelRecordsFor('FAM')
        for(const famKey of famMap.keys()) families.push([famKey, this.toJson(famKey)])
        return families
    }

    // Returns a stringified plain old JSON object embedded inside a Javascript declaration
    toJsonMapFile(indent=0, varName='jsonFamilies') {
        const famArr = this.toJsonMap()
        let text = `// auto-generated by FamilyJson.toJsonFile() on ${new Date().toLocaleString()}\n`
        text += `export const ${varName} = new Map(\n`
        text += JSON.stringify(famArr, null, indent)
        text += '\n)'
        return text
    }

    // Returns a Map object whith FAM '@F123@' keys and hydrated family records
    toMap() {
        const map = new Map()
        const famMap = this._gedrecs.topLevelRecordsFor('FAM')
        for(const famKey of famMap.keys()) map.set(famKey, this.toJson(famKey))
        return map
    }

    writeFile(outputFileName) {
        fs.writeFile(outputFileName, this.toJsonFile(2), function (err) {
            if (err) throw err
            console.log(`GEDCOM Family Json data written to ${outputFileName}'`)
        })
    }
}